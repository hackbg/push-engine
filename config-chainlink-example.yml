# =================================================================
# │         Chainlink Data Streams Transmitter Example            │
# =================================================================
#
# Copy this file to 'config.yml' and fill in your specific details.
# This file configures which data feeds to monitor and which on-chain
# contracts to send the data to.

# A list of all unique off-chain Data Streams to subscribe to.
# Find more feed IDs in the Chainlink documentation.
feeds:
  - name: 'ETH/USD'
    feedId: '0x000359843a543ee2fe414dc14c7e7920ef10f4372990b79d6361cdc0dd1ba782'

# --- Default Global Settings ---

# The default chainId to use for transactions if not specified in a target.
chainId: 43113 # Default to Avalanche Fuji

# The maximum gas limit you are willing to spend on a transaction.
gasCap: '250000'

# Cron expression defining the data update frequency.
# This example runs every 30 seconds.
interval: '*/30 * * * * *'

# The minimum price change percentage to trigger an on-chain update.
# This example is set to 0.1%
priceDeltaPercentage: 0.001

# --- Chain & Verifier Definitions ---

# A list of all supported blockchain networks with their RPC URLs.
chains:
  - id: 43113
    name: 'Avalanche Fuji Testnet'
    currencyName: 'Fuji AVAX'
    currencySymbol: 'AVAX'
    currencyDecimals: 18
    rpc: 'https://api.avax-test.network/ext/bc/C/rpc' # <-- TODO: Replace with your own reliable RPC URL
    testnet: true
  - id: 421614
    name: 'Arbitrum Sepolia'
    currencyName: 'Arbitrum Sepolia Ether'
    currencySymbol: 'ETH'
    currencyDecimals: 18
    rpc: 'https://sepolia-rollup.arbitrum.io/rpc' # <-- TODO: Replace with your own reliable RPC URL
    testnet: true

# The addresses of the official Chainlink Verifier contracts on each network.
verifierAddresses:
  - chainId: 43113
    address: '0x2bf612C65f5a4d388E687948bb2CF842FFb8aBB3'
  - chainId: 421614
    address: '0x2ff010DEbC1297f19579B4246cad07bd24F2488A'

# --- On-Chain Target Configurations ---

# This section defines which smart contracts to call for each feed on each chain.
# You can have multiple targets for the same feed.
targetChains:
  - chainId: 43113 # Target is on Avalanche Fuji
    targetContracts:
      # This configuration sends ETH/USD data to a contract on Fuji
      - feedId: '0x000359843a543ee2fe414dc14c7e7920ef10f4372990b79d6361cdc0dd1ba782'
        # TODO: Replace with the address of your deployed contract on Fuji
        address: '0xYourDataStreamsFeedContractOnFuji' # <-- CHANGED
        # The name of the function to call on your smart contract
        functionName: 'updateReport'
        # The arguments the Transmitter should prepare and send to the function
        functionArgs: ['reportVersion', 'verifiedReport']
        # The ABI for the target function, required to encode the transaction
        abi:
          - name: 'updateReport'
            type: 'function'
            stateMutability: 'nonpayable'
            inputs:
              - { "internalType": "uint16", "name": "reportVersion", "type": "uint16" }
              - { "internalType": "bytes", "name": "verifiedReportData", "type": "bytes" }
            outputs: []
